{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.API_URL = '/api';\n    this.AUTH_URL = '/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n    // Check if user is already logged in\n    if (this.getToken()) {\n      this.loadCurrentUser();\n    }\n  }\n  login(credentials) {\n    const headers = new HttpHeaders({\n      'Authorization': 'Basic ' + btoa(credentials.username + ':' + credentials.password),\n      'Content-Type': 'application/json'\n    });\n    return this.http.post('/login', {}, {\n      headers\n    }).pipe(tap(response => {\n      if (response.access_token) {\n        localStorage.setItem('token', response.access_token);\n        this.isLoggedInSubject.next(true);\n        this.loadCurrentUser();\n      }\n    }));\n  }\n  register(userData) {\n    return this.http.post(`${this.AUTH_URL}/register`, userData);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.isLoggedInSubject.next(false);\n    this.router.navigate(['/login']);\n  }\n  getCurrentUser() {\n    return this.http.get(`${this.API_URL}/users/me`).pipe(tap(user => this.currentUserSubject.next(user)));\n  }\n  loadCurrentUser() {\n    if (this.getToken()) {\n      this.getCurrentUser().subscribe({\n        next: user => {\n          this.currentUserSubject.next(user);\n          this.isLoggedInSubject.next(true);\n        },\n        error: () => {\n          this.logout();\n        }\n      });\n    }\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAdmin() {\n    const user = this.currentUserSubject.value;\n    return user?.roles?.some(role => role.name === 'ADMIN') || false;\n  }\n  hasRole(roleName) {\n    const user = this.currentUserSubject.value;\n    return user?.roles?.some(role => role.name === roleName) || false;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","tap","AuthService","constructor","http","router","API_URL","AUTH_URL","currentUserSubject","currentUser$","asObservable","isLoggedInSubject","isLoggedIn$","getToken","loadCurrentUser","login","credentials","headers","btoa","username","password","post","pipe","response","access_token","localStorage","setItem","next","register","userData","logout","removeItem","navigate","getCurrentUser","get","user","subscribe","error","getItem","isAdmin","value","roles","some","role","name","hasRole","roleName","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Development\\user-management-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\n\r\nexport interface User {\r\n  id?: number;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  enabled?: boolean;\r\n  createdAt?: string;\r\n  roles?: Role[];\r\n}\r\n\r\nexport interface Role {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface LoginResponse {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = '/api';\r\n  private readonly AUTH_URL = '/auth';\r\n  \r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  \r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(false);\r\n  public isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    // Check if user is already logged in\r\n    if (this.getToken()) {\r\n      this.loadCurrentUser();\r\n    }\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': 'Basic ' + btoa(credentials.username + ':' + credentials.password),\r\n      'Content-Type': 'application/json'\r\n    });\r\n\r\n    return this.http.post<LoginResponse>('/login', {}, { headers }).pipe(\r\n      tap(response => {\r\n        if (response.access_token) {\r\n          localStorage.setItem('token', response.access_token);\r\n          this.isLoggedInSubject.next(true);\r\n          this.loadCurrentUser();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  register(userData: RegisterRequest): Observable<User> {\r\n    return this.http.post<User>(`${this.AUTH_URL}/register`, userData);\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.currentUserSubject.next(null);\r\n    this.isLoggedInSubject.next(false);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getCurrentUser(): Observable<User> {\r\n    return this.http.get<User>(`${this.API_URL}/users/me`).pipe(\r\n      tap(user => this.currentUserSubject.next(user))\r\n    );\r\n  }\r\n\r\n  private loadCurrentUser(): void {\r\n    if (this.getToken()) {\r\n      this.getCurrentUser().subscribe({\r\n        next: (user) => {\r\n          this.currentUserSubject.next(user);\r\n          this.isLoggedInSubject.next(true);\r\n        },\r\n        error: () => {\r\n          this.logout();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return user?.roles?.some(role => role.name === 'ADMIN') || false;\r\n  }\r\n\r\n  hasRole(roleName: string): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return user?.roles?.some(role => role.name === roleName) || false;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}